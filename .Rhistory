install.packages("KernSmooth")
library(KernSmooth)
library(datasets)
data("iris")
?iris
lapply(split(iris,iris$Species),mean)
lapply(split(iris$Sepal.Length,iris$Species),mean)
apply(iris[, 1:4], 2, mean)
?apply
apply(iris, 2, mean)
data("mtcars")
?mtcars
lapply(split(mtcars$mpg,mtcars$cyl),mean)
tapply(mtcars$mpg,"cyl",mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
mean(mtcars$mpg, mtcars$cyl)
?with
with(mtcars, tapply(mpg, cyl, mean))
a<-tapply(mtcars$mpg,mtcars$cyl,mean)
a$'4'-a$'6'
a$`4`-a$`6`
a
a[4]
a['4']
a['4']-a['6']
a['4']-a['8']
a<-tapply(mtcars$hp,mtcars$cyl,mean)
a['4']-a['8']
a
debug(ls)
ls
ls
exit
exit()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv ","q3_1.csv")
a<- read.csv("q3_1.csv")
str(a)
agricultureLogical <- a$ACR ==3
agricultureLogical <- a$ACR ==3 & a$AGS == 6
which(agricultureLogical)
library("jpeg")
library(jpeg)
install.packages("jpeg")
library(jpeg)
load("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
b<-readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg","q3_2.jpg")
b<-readJPEG("q3_2.jpg")
dim(b)
b<-readJPEG("q3_2.jpg",native = TRUE)
dim(b)
?quantile()
quantile(x, probs = c(.2,.8))
quantile(b, probs = c(.2,.8))
quantile(b, probs = c(.3,.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv","q3_3_1.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv","q3_3_2.csv")
c<- read.csv("q3_3_1.csv")
d<- read.csv("q3_3_2.csv")
str(c)
str(d)
merge(c,d,by.x=X,by.y = CountryCode)
merge(c,d,by.x='X',by.y = 'CountryCode')
re<-merge(c,d,by.x='X',by.y = 'CountryCode')
?merge
sort(re$Gross.domestic.product.2012,decreasing = T)
re[order(re$Gross.domestic.product.2012,decreasing = T)]
re[order(re$`Gross.domestic.product.2012`,decreasing = T)]
re[order(re[[Gross.domestic.product.2012]],decreasing = T)]
re[order(re[['Gross.domestic.product.2012']],decreasing = T)]
re$Gross.domestic.product.2012
re[order(re[[Gross.domestic.product.2012]],decreasing = T),]
re[order(re$Gross.domestic.product.2012,decreasing = T),]
tail(re[order(re$Gross.domestic.product.2012,decreasing = T),])
re[order(re$Gross.domestic.product.2012,decreasing = T,na.last = F),]
tail(re[order(re$Gross.domestic.product.2012,decreasing = T),])
View(c)
View(d)
c<- read.csv("q3_3_1.csv",skip = 4)
c<- read.csv("q3_3_1.csv",skip =10)
View(c)
c<- read.csv("q3_3_1.csv",skip =1)
View(c)
c<- read.csv("q3_3_1.csv",skip =4)
View(c)
re<-merge(c,d,by.x='X',by.y = 'CountryCode')
View(re)
View(c)
c[1,]
c<-c[1:190,]
re<-merge(c,d,by.x='X',by.y = 'CountryCode')
out<-re[order(re$X.1,decreasing = T,na.last = F),]
View(out)
out[1,]$Long.Name
out[13,]$Long.Name
out[13,]$X.3
re['X.1',]
re[,'X.1']
re[,'X.1'] <- as.numeric(re[,'X.1'])
out<-re[order(re$X.1,decreasing = T,na.last = F),]
out[13,]$X.3
c[,'X.1'] <- as.numeric(c[,'X.1'])
re<-merge(c,d,by.x='X',by.y = 'CountryCode')
out<-re[order(re$X.1,decreasing = T,na.last = F),]
View(out)
c<- read.csv("q3_3_1.csv",skip =4)
View(c)
c<-c[1:190,]
as.numeric(levels(c$X.1))[c$X.1]
c$X.1 <- as.numeric(levels(c$X.1))[c$X.1]
re<-merge(c,d,by.x='X',by.y = 'CountryCode')
out<-re[order(re$X.1,decreasing = T,na.last = F),]
out[13,]$X.3
table(out$Income.Group)
tapply(out$X.1,out$Income.Group,mean)
library(Hmics)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
out$GDPgroup <- cut2(out$X.1,g=5)
?table()
table(out$GDPgroup,out$Income.Group)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
mydf<- read.csv(path2csv,stringsAsFactors = F)
mydf<- read.csv(path2csv,stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran<-tbl_df(mydf)
rm("mydf","a","c")
rm("out","re","d")
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(5:20)
select(cran,-(X:sizee))
select(cran,-(X:size))
filter(cran, package == "swirl")
filter(cran, r_version ==
| "3.1.1", country == "US")
filter(cran, r_version | "3.1.1", country == "US")
filter(cran, r_version=="3.1.1", country == "US")
?Comparison
filter(cran, r_version<="3.0.2", country == "IN")
filter(cran, country=="US"| country == "IN")
filter(cran, size>100500 & r_os=="linux-gnu")
filter(cran, size>100500 , r_os=="linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_verison))
filter(cran, !is.na(r_version))
cran2 <- select(cran,size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id)
)
arrange(cran2, package, ip_id)
arrange(cran2, country,desc(r_version), desc(ip_id))
arrange(cran2, country,desc(r_version), (ip_id))
arrange(cran2, country,desc(r_version), ip_id)
cran3
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran<-tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package<- group_by(cran,package)
by_package
summarize(cran, avg_bytes = mean(size))
summarize(by_package, avg_bytes = mean(size))
summarize(by_package, mean(size))
?n
source('/var/folders/g1/9x5pg08x0xlbpx9q5fy3mq940000gn/T//Rtmp2wFImQ/summarize1.R')
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- file(pack_sum,count>679)
top_counts <- filter(pack_sum,count>679)
top_counts
View(top_counts)
top_counts_sorted<-arrange(top_counts,desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum,unique>465)
View(top_unique)
top_unique_sorted<-arrange(top_unique,desc(unique))
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
library(tidyr)
students
?gather
gather(students,sex, count,-grade)
students2
res<-gather(students,sex_class, count,-grade)
res<-gather(students2,sex_class, count,-grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
students3
submit()
?spread
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5").
extract_numeric("class5")
submit()
students4
submit()
submit()
submit()
passed
failed
mutate(passed,status = "passed")
passed<-mutate(passed,status = "passed")
passed
failed<-mutate(failed,status = "failed")
packageVersion('dplyr').
packageVersion('dplyr')
bind_rows(passed,failed)
sat
submit()
submit()
submit()
rm(list = ls())
setwd("~/Documents/coursera/R/JHU/GettingDataCourseProject")
activity_labels <- read.table("./UCI HAR Dataset/activity_labels.txt")
View(activity_labels)
features <- read.table("./UCI HAR Dataset/features.txt")
x_test <- read.table("./UCI HAR Dataset/test/X_test.txt")
subjest_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
y_test <- read.table("./UCI HAR Dataset/test/y_test.txt")
View(features)
View(x_test)
View(subjest_test)
View(y_test)
features$V2 %in% c("mean","std")
pmatch("mean",features$V2)
?pmatch
features$V2
pmatch("mean",as.character(features$V2))
as.character(features$V2)
pmatch("angle(Z,gravityMean)",as.character(features$V2))
pmatch("angle(Z,gravityMean",as.character(features$V2))
pmatch("angle",as.character(features$V2))
pmatch(features$V2,c("mean"))
pmatch(features$V2,c("mean"),dup=T)
pmatch(c("", "ab", "ab"), c("abc", "ab"), dup=FALSE)
?grepl
grep("mean",features$V2)
grep("std",features$V2)
grepl("mean",features$V2)
x_train <- read.table("./UCI HAR Dataset/train/X_train.txt")
subjest_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
y_train <- read.table("./UCI HAR Dataset/train/y_train.txt")
grep("mean",features$V2) & grep("std",features$V2)
grepl("mean",features$V2) & grepl("std",features$V2)
means_stds <- grepl("mean",features$V2) | grepl("std",features$V2)
sum(means_stds)
grep("mean",features$V2)
grep("mean",features$V2).len()
len(grep("mean",features$V2))
length(grep("mean",features$V2))
x <- rbind(x_test, y_test)
x <- rbind(x_test, x_train)
subject_test <- read.table("./UCI HAR Dataset/test/subject_test.txt")
subject_train <- read.table("./UCI HAR Dataset/train/subject_train.txt")
test <- cbind(x_test,y_test,subject_test)
train <- cbind(x_train,y_train,subject_train)
data <- rbind(train, test)
subject_data <- rbind(subject_train, subject_test)
x_data <- rbind(x_train, x_test)
y_data <- rbind(y_train, y_test)
x_data <- x_data[means_stds,]
x_data <- x_data[,means_stds]
x_data <- rbind(x_train, x_test)
x_data <- x_data[,means_stds]
num_variables <- sum(means_stds)
data <- cbind(x_data,y_data,subject_data)
data$V2
data <- cbind(subject_data,x_data,y_data)
data <- cbind(subject_data,y_data,x_data)
data[2,]
data[,2]
activity_labels[data[,2],2]
data[,2] <- activity_labels[data[,2],2]
colnames(data)
features[means_stds,]
class(features[means_stds,])
c("subject","activity",features[means_stds,])
as.vector(features[means_stds,])
as.vector(features[means_stds,2])
c("subject","activity",features[means_stds,2])
colnames(data) <- c("subject","activity",as.character(features[means_stds,2]))
View(data)
tapply(data,data$activity,mean)
data[,3].tapply
tapply(data[,3],data$activity,mean)
library(dplyr)
head(data)
data <- tbl_df(data)
head(data)
group_by(data,subject)
?group_by
group_by(data,subject,activity)
tmp <- group_by(data,subject,activity)
summarize(tmp)
?summerize
?summarize
summarize(tmp,mean
)
summarize(tmp,mean)
summarize_each(tmp,mean)
summarize_each(tmp,funs(mean))
tidy <- data %>% group_by(subject, activity) %>% summarise_each(funs(mean))
View(tidy)
View(data)
View(subject_test)
View(subject_train)
View(subject_data)
View(data)
mean(data[1:27],3)
mean(data[1:27,3])
data[1:27,3]
data[1:27,3].mean()
mean(data[1:27,3])
summary(data[1:27,3])
summary(subset(data[['3']],data$subject ==1 & data$activity=="STANDING"))
data$subject ==1 & data$activity=="STANDING"
head(data$subject ==1 & data$activity=="STANDING")
data[['3']]
summary(subset(data[[`3`]],data$subject ==1 & data$activity=="STANDING"))
summary(subset(data[,3],data$subject ==1 & data$activity=="STANDING"))
summary(subset(data[,3],data$subject ==20 & data$activity=="STANDING"))
write.table(x = tidy, file = "tidyset.txt", row.name = FALSE)
rm(`ls`)
rm(list = `ls)
)
`
)
rm(list = `ls`)
ls
source("run_analysis.R")
View(tidy)
?summarise_each
